<?xml version="1.0" standalone="no" encoding="utf-8"?>
<!DOCTYPE article PUBLIC "-//Normal Walsh//DTD DocBk XML V3.1.4//EN" 
                      "http://nwalsh.com/docbook/xml/3.1.4/db3xml.dtd" 
   [
   <!ENTITY odin "Odin OS"> 
   <!ENTITY proglang "Bor">
   <!ENTITY vbar "&#124;">
   ]
>
<article>
<artheader>
   <title>Odin OS: Design and Implementation</title>
   <author><firstname>Stanislav</firstname><lastname>Karchebny</lastname></author>
   <copyright><year>2002</year><holder>Stanislav Karchebny</holder></copyright>
</artheader>

<sect1><title>Introduction.</title>

   <sect2><title>Systems Software Research is Irrelevant.</title>
   <para>give link to Rob Pike's .pdf paper here</para>
   </sect2>
   <sect2><title>Bad situation with current operating systems.</title></sect2>
   <sect2><title>Need for a robust, easy-to-use OS.</title></sect2>

</sect1>

<sect1><title>Project goals.</title>

<para>Small, reliable, portable, distributed, real-time operating platform.</para>

<itemizedlist>

<listitem>
<para>Based on an object oriented language with notion of 'interfaces': parts
that allow objects to inter-operate regardless of their internal implementation.
</para>
</listitem>

<listitem>
<para>An implementation language that itself can express very high level abstractions
while being simple and can produce effectively optimized code.
</para>
</listitem>

<listitem>
<para>System is built out of myriads of such small components, that every one
only does a little function, falling under some specific category, and does
it way too well. All components interact by means of interfaces. There can
be 
<orderedlist numeration="loweralpha">
   <listitem>
      <para>marshalling primitives integrated into an OS at bottom level,</para>
   </listitem>
   <listitem>
      <para>transparent proxy components that will do marshalling for procedures on the other side of the Net.</para>
   </listitem>
</orderedlist>
<mediaobject>
   <imageobject>
      <imagedata fileref="tinycore.png"/>
   </imageobject>
   <textobject>
      <para>A tiny core (only several Kbytes in size) and myriads of components
      built and running over each other, providing all aspects of os functionality,
      including scheduler and IRQ dispatcher.
      </para>
   </textobject>
</mediaobject>
</para>
</listitem>

</itemizedlist>

   <sect2><title>Modularity.</title></sect2>
   <sect2><title>Flexibility.</title>
      <para>Configurability (management of dynamism).</para>
      <orderedlist numeration="arabic">
         <listitem>
            <para>code distribution over wide-area networks to allow pushing or pulling
             new components when available, and</para>
         </listitem>
         <listitem>
            <para>safe dynamic reconfiguration so we can plug in new components
            when desired.</para>
         </listitem>
      </orderedlist>
   </sect2>
   <sect2><title>Protection.</title></sect2>
   <sect2><title>Persistence.</title></sect2>
   <sect2><title>Distribution/mobility/"nomadity".</title></sect2>
   <sect2><title>User-friendly environment.</title></sect2>

</sect1>

<sect1><title>Ways to achieve goals.</title>

   <sect2><title>Component orientation.</title></sect2>
   <sect2><title>Exokernel-like approach.</title></sect2>
   <sect2><title>SISR, i386 segments, "capabilities"-alike "interface facets".</title></sect2>
   <sect2><title>Persistent Object Filesystem, implicit and explicit persistence support in kernel.</title></sect2>
   <sect2><title>Request broker approach, client/server architecture.</title></sect2>
   <sect2><title>GUI, CLUEless basic environment.</title></sect2>

</sect1>

<sect1><title>Detailed descriptions.</title>

   <sect2><title>Programming language of choice.</title>
   
   <epigraph><attribution>Robert Heinlein, "Moon is a Harsh Mistress".</attribution>
   <para>There's ain't such thing as a free lunch.</para>
   </epigraph>
   
   <para>This operating system turns to become standing out of the mainstream way.
   While many UN*X proponents started using programs in truly UNIX way - small programs
   doing only their own job - there are plenty of huge bloated programs, that came from
   windows era and made it straight into UNIX environment because of so-called
   "portability". No, I'm not against "portability", but dragging tonnes of red-tape
   from one system to another with different rules and traditions - that's nonsense.
   </para>
   
   <para>Odin is aimed from the very start to serving a multitude of small components
   using strictly specified interfaces and doing their only job the best possible way.
   </para>
   
   <para>This doesn't require inventing a completely new language, and many old ones
   can still serve their purpose. But, honestly, many languages suffer from bloat syndrome,
   some other from inportability or idiosyncrasy.
   </para>
   
   <para>The needed language is one that fulfills the following requirements:
   <itemizedlist>
      <listitem>
      <para>Easy separation of interface and implementation.</para>
      <para>Minimal amount of red-tape and ambiguities is a must.</para>
      <para>Java is a good pretender for this position.</para>
      </listitem>
      <listitem>
      <para>Have some form of support for (intricate) Odin inter-component communications.</para>
      <para>Almost anything from NASM to Perl can use some kind of wrappers to hide this complexity.</para>
      </listitem>
      <listitem>
      <para>Should not specify any memory allocation policies, and be ready to easily integrate Odin's strategies.</para>
      <para>C/C++ is rather flexible here with malloc/new that can be redefined, but not
      Java, with its sophisticated garbage collector.</para>
      <para>Oberon doesn't fit here for the same reason.</para>
      </listitem>
      <listitem>
      <para>Low-level enough to be able to express most of processor-level instructions
      without resorting to assembly.</para>
      <para>C/C++, Modula-2 fit here just fine.</para>
      </listitem>
   </itemizedlist>
   </para>

   <para>I wasn't able to figure out a language that would do all that and be simple and
   precise. So I invented &proglang;.
   </para>

      <!-- PROGLANG-BEGIN -->
      <sect3><title>&proglang;.</title>

      <sect4><title>Introduction</title>      
      <para>The language is rather simple. Most of the operations is performed by functions,
      optimized for target architecture. Language syntax is pushed towards that of C and
      Oberon, with effort to decrease or even eliminate ambiguities that may rise.
      </para>
      
      <para>There are two parts of the same language, processed by the same compiler:
      <itemizedlist>
         <listitem>
         <para>Interface specification.</para>
         <para>This is where inter-component interfaces are specified.</para>
         </listitem>
         <listitem>
         <para>Component specification.</para>
         <para>This is where actual program is implemented.</para>
         </listitem>
      </itemizedlist>
      </para>
      
      <para>For simplicity, &proglang; doesn't support classes or any other "modern"
      OOP things besides interfaces. The language is component-oriented, and since
      components are notably small, it eliminated the need for more fine-grained
      decomposition. This also helps keep syntax laconic and compiler fast.
      </para>
      </sect4>

      <sect4><title>Syntax.</title>
      <para>An extended Backus-Naur Formalism (EBNF) is used to describe the 
      syntax of &proglang;:
      <itemizedlist>
         <listitem>
         <para>Alternatives are separated by &vbar;.</para>
         </listitem>
         <listitem>
         <para>Brackets [ and ] denote optionality of the enclosed expression, and</para>
         </listitem>
         <listitem>
         <para>curly braces { and } denote its repetition (possibly 0 times).</para>
         </listitem>
         <listitem>
         <para>Syntactic entities (non-terminal symbols) start with an upper-case letter (e.g. Statement).</para>
         </listitem>
         <listitem>
         <para>Symbols from language vocabulary (terminal symbols) either start with lower-case letter (e.g. ident), or
         are written all in upper-case letters (e.g. WHILE), or are denoted by strings (e.g. ":=").
         </para>
         </listitem>
      </itemizedlist>
      </para>
      </sect4>
      
      <sect4><title>Vocabulary and Representation.</title>
      
      <para>The representation of (terminal) symbols in terms of characters is defined
      using the UNICODE set (in UTF-8 encoding). Symbols are identifiers, numbers, strings,
      operators, and delimiters. The following lexical rules must be observed: Blanks and
      line breaks may not occur within symbols (except in comments, and blanks in strings).
      They are ignored unless they are essential to separate two consecutive symbols.
      Capital and lower-case letters are considered distinct.
      </para>
      
      <orderedlist numeration="arabic">
         <listitem>
         <para><emphasis>Identifiers</emphasis></para>
         </listitem>
         <listitem>
         <para><emphasis>Numbers</emphasis></para>
         </listitem>
         <listitem>
         <para><emphasis>Character constants</emphasis></para>
         </listitem>
         <listitem>
         <para><emphasis>Strings</emphasis></para>
         </listitem>
         <listitem>
         <para><emphasis>Operators</emphasis> and <emphasis>delimiters</emphasis></para>
         </listitem>
         <listitem>
         <para><emphasis>Comments</emphasis></para>
         </listitem>
      </orderedlist>

      <para>EBNF DocBook tags: constraintdef, productionrecap.
      
<productionset><title>Arithemetic Expressions</title>
<production id="ebnf.expression">
  <lhs>Expression</lhs>
  <rhs><nonterminal def="ebnf.arith">ArithExpression</nonterminal> |
       <nonterminal def="ebnf.mult">MultExpression</nonterminal>
  <lineannotation>Does this grammar actually get precedence right?
  </lineannotation>
  </rhs>
</production>
<production id="ebnf.arith">
  <lhs>ArithExpression</lhs>
  <rhs><nonterminal def="ebnf.expression">Expression</nonterminal>
       '+'
       <nonterminal def="ebnf.mult">MultExpression</nonterminal> |
       <nonterminal def="ebnf.expression">Expression</nonterminal>
       '-'
       <nonterminal def="ebnf.mult">MultExpression</nonterminal>
  </rhs>
</production>
<production id="ebnf.mult">
  <lhs>MultExpression</lhs>
  <rhs><nonterminal def="ebnf.mult">MultExpression</nonterminal>
       '*'
       <nonterminal def="ebnf.mult">MultExpression</nonterminal> |
       <nonterminal def="ebnf.mult">MultExpression</nonterminal>
       '/'
       <nonterminal def="ebnf.mult">MultExpression</nonterminal> |
       <nonterminal def="ebnf.number">Number</nonterminal>
  </rhs>
  <constraint linkend="div0"/>
</production>
<production id="ebnf.number">
  <lhs>Number</lhs>
  <rhs>[0-9]+</rhs>
</production>
</productionset>      
      </para>
      
      </sect4>
      
      <sect4><title>Declarations and scope rules</title>
      </sect4>
      
      <sect4><title>Constant declarations</title>
      </sect4>
      
      <sect4><title>Type declarations</title>
      </sect4>
      
      <sect4><title>Variable declarations</title>
      </sect4>
      
      <sect4><title>Expressions</title>
      </sect4>
      
      <sect4><title>Statements</title>
      </sect4>
      
      <sect4><title>Procedure declarations</title>
      </sect4>
      
      <sect4><title>Modules</title>
      </sect4>
      
      </sect3>
      <!-- PROGLANG-END -->
   
   </sect2>
   
   <sect2><title>Components.</title>
      <sect3><title>"Do only one thing, but do it best" approach.</title></sect3>
   </sect2>

   <sect2><title>Exokernel.</title>
      <sect3><title>General decomposition.</title>
         <para>The operating system is built of finely-grained set of interoperable replaceable components.</para>
      </sect3>
      <sect3><title>Basic system core: The ORB.</title></sect3>
      <sect3><title>Functional end-user OS implementation.</title></sect3>
   </sect2>
   
   <sect2><title>Protection mechanisms.</title>
      <sect3><title>SISR.</title>
         <para>Only one privilege level across the system. All components run in ring 0 (superuser) mode.</para>
         <para>SISR (Software Instruction Set Reduction) also known as soft-scanning is used to ensure no
         untrusted components are going to run trusted code.</para>
      </sect3>
      <sect3><title>i386-imposed protection possibilities.</title>
         <para>Each component is established in its own protection domain (PD).</para>
         <para>Segment-based protection of component domains.</para>
      </sect3>
      <sect3><title>"interface facets".</title></sect3>
   </sect2>
   
   <sect2><title>Persistence.</title>
      <sect3><title>Persistent Object Filesystem - a persistent storage.</title>
         <para>Use of Reiser filesystem, versions 4 and up for efficient and extensible
         file-storage.</para>
         <para>Reiser4 and up allows efficient databases storage, file storage, extended
         attributes, versioning methods et cetera.</para>
      </sect3>
      <sect3><title>Containers - components from filesystem point of view.</title></sect3>
      <sect3><title>Implicit persistence - general approach.</title></sect3>
      <sect3><title>Explicit persistence - specialized apps (e.g. databases) requirements.</title></sect3>
   </sect2>
   
   <sect2><title>Distribution.</title>
      <sect3><title>The ORB variants - providing the best service possible.</title>
         <para>Convenient ORB is local-only, RPC is implemented as ORB's exception handler,
         which in turn can employ Marshalling components and such.. Network latency is
         far longer than any fault/inter-component overhead.</para>
      </sect3>
      <sect3><title>Client/server ICC.</title></sect3>
      <sect3><title>Mobility - configurability in heterogenous dynamic network environment.</title></sect3>
   </sect2>
   
   <sect2><title>User-friendliness.</title>
      <sect3><title>CLUEless (Command-Line User Environment-less) approach.</title></sect3>
   </sect2>

</sect1>

</article>
