In ../libos/console.asm there is a small console helper module.
It will be eventually compiled into a component (at least I think so)...

provided functions (available thru ../include/console.inc) and
provided macros (available thru ../include/debug.inc):


-- Put cursor into position x,y
function:      console__gotoxy
parameters:    EBX = x (0..79), EDX = y (0..24)
return value:  none
macro:         none

Sets cursor pointer to position designated by x,y.


-- Scroll screen one line up
function:      console__scroll_up
parameters:    none
return value:  none
macro:         none
side effect:   cursor position is not modified


-- Put cursor on a new line
function:      console__newline
parameters:    none
return value:  none
macro:         none

Puts cursor on start of new line. Scrolls screen up when necessary.


-- Print a 1 byte character
function:      console__print_char
parameters:    AL = value to print
macro:         outchar

Prints character at current cursor position. Cursor is advanced to next position.


-- Print a 4 byte dword in hexadecimal notation
function:      console__print_dword
parameters:    EDX = value to print
macro:         outdword
macro:         outdword <PARAM>
macro:         outdwordn
macro:         outdwordn <PARAM>

Print dword in 8 hex digits. *n versions of macros put a newline after the printed value.


-- Print a 2 byte word in hexadecimal notation
function:      console__print_word
parameters:    DX = value to print
macro:         outword
macro:         outword <PARAM>
macro:         outwordn
macro:         outwordn <PARAM>

Print word in 4 hex digits. *n versions of macros put a newline after the printed value.


-- Print a byte in hexadecimal notation
function:      console__print_byte
parameters:    DL = value to print
macro:         outbyte
macro:         outbyte <PARAM>
macro:         outbyten
macro:         outbyten <PARAM>

Print byte in 2 hex digits. *n versions of macros put a newline after the printed value.


-- Print a zero-terminated string
function:      console__print
parameters:    DS:ESI = address of string
macro:         outstring <PARAM>
macro:         outstringa <PARAM>

Prints a string pointed to by ESI on screen in current cursor position.
Handles EOL symbol as newline (code 0x0A).
outstringa version of macro pauses (waits <enter> press) before continuing.


-- Wait for enter keypress/release
function:      console__wait_ack
parameters:    none
macro:         pause

Waits for <Enter> key to be pressed and then released, then returns control.


-- Debugging: display registers contents
function:      console__debug_showregs
parameters:    none
macro:         outregs

Displays contents of 8 x86 registers: EAX, EBX, ECX, EDX, ESI, EDI, EBP, ESP.
Macro version waits for <Enter> before continuing.


-- Debugging: display stack contents
function:      console__debug_showstack
parameters:    none
macro:         outstack

Displays contents of 8 last dwords pushed on stack. If there is less
than 8 dwords on the stack, causes #GP.
Macro version waits for <Enter> before continuing.


-- Debugging: display memory contents
function:      console__debug_showmem
parameters:    DS:ESI = memory block address
macro:         outmem <PARAM>

Displays 256 bytes in region of memory starting at DS:ESI.
If there is less than 256 bytes available at this position, causes #GP.
Macro version waits for <Enter> before continuing.
