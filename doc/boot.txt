Odin Bootstrap Process.
Excerpt from An Illustrated Guide (The White Book).

Chapter 1. Initial Boot Up.

1.1 Intro.

I will skip many technical details about how the system powers up.

We will start at the moment BIOS is going to load our boot loader into memory and execute it.
Lets first take a look at how the boot image is structured on disk:

  +----------------------+
  |      Boot loader     |
  |   +------------------+
  |   |      The ORB     |
  |   |    bootstrapper  |
  |   +------------------+
  |   |      The ORB     |
  |   |       image      |
  |   +------------------+
  |   |  The Library OS  |
  |   |   bootstrapper   |
  |   |      image       |
  +---+------------------+

Figure 1-1. Boot Image Structure on Boot Media.

And in detail:

* Boot loader - its the thing the BIOS will load in the very first place. The purpose of the
boot loader is to load selected operating system in memory and pass control to it.
Odin bootloader is multiboot compliant (that is, it complies with the
Multiboot standard). However, this bootloader fits into 512 bytes
and therefore does not support extra facilities such as providing system memory map and
some others.

* ORB bootstrapper - initializes environment so that ORB will find everything it expects to
find in their right places :). NOTE that ORB itself is not multiboot compliant and therefore
needs an Agent or a "proxy" that will be multiboot compliant and will give control to the ORB
after setting up correct environment.

* The ORB image - its the ORB itself.

* The Library OS bootstrapper image - its the library OS part that gets loaded before the
rest of the library OS and provides some basic functionality such as disk drives access and
basic filesystem support so the rest of the OS can be loaded. In very simple cases this
bootstrapper can be replaced with the OS itself - this is suitable for some simple testcases
or embedded systems.

1.2 Boot loader operation

The first thing BIOS does is load the boot loader from boot media into memory at location
0x7c00 and passes control to it.

[images/pictorial1/boot1.gif alt="Boot Loader started off Boot Media"]

The bootloader performs these actions, in order:

* CPU is checked to be 80386 or better, if it is not so, halt with error.

* Address line A20 is enabled, so that addressing memory above 1Meg is possible.

* Check is made to see if IBM/Microsoft extensions of BIOS disk service 0x13 are present,
if so LBA addressing is used, otherwise CHS addressing is used instead.

* If loaded off any media other than Floppy Disk, partition table is read into memory
at location 0x7a000 and searched for a partition with code 0xAB
(Odin Persistence FS Partition). If this partition code is found, the system is going to load
off this partition, otherwise bootstrap is aborted with an error message.

* The system (ORB bootstrapper, ORB and LibOS bootstrapper) is loaded into memory at
address 0x10000.

* System is switched into protected mode.

* Multiboot information header is prepared.

* Image is moved to its destined location.

* Control is passed to image entry point.

[images/pictorial1/boot2.gif" alt="Boot image prepared for bootstrap"]

Then the ORB bootstrapper comes into action, as depicted in Chapter 2.


Chapter 2: ORB Boot Up.

This chapter describes preparation procedures taken to start ORB up, including execution
of ORB constructor.
After the Initial Boot Up memory map looks like this:

[images/pictorial2/start_mem.gif" alt="Memory Map Before ORB Boot Up Phase"]

The ORB bootstrap prepares two GDT entries for code and data matching ORB base and size exactly.
It also makes sure the size of the ORB and LibOS does not exceed 1Mb.

[images/pictorial2/temp_gdt.gif" alt="Temporary GDT before jumping to ORB constructor"]

When all that is ready, we jump off into the ORB constructor!

2.2 The ORB constructor

After gaining control the ORB _immediately_ moves the library OS image up in memory before it gets
overwritten by ORB's BSS variables.

[images/pictorial2/libos_up.gif" alt="LibOS is moved up to the very top of physical memory"]






Chapter 3. LibOS Boot Up.

After ORB constructs itself and moves library os up in memory it has to construct library os
bootstrapper component and start it, effectively running the exokernel os. When bootstrapper
returns, the system is shut down.

The ORB calls bootstrapper constructor when its finished with initialization and passes control
to the exokernel OS. In reality, you use any kind of initialization methods in your OS, but here
I'll describe the approach taken in Odin.

The Odin libOS bootstrap component is called 'strapper' and it contains a bootfs component in
addition to bootstrapper code. This bootfs component implements logic needed to access (load and
instantiate) several components needed for future system functioning).

These crucial components are:
- very-low-level hardware driving components (like IRQ and DMA handling for PC)
- memory management component ('mimir')
- standard boot-off media support (floppy, ATAPI, SCSI, network)
- not-so-standard boot-off media (FireWire, USB)

Less crucial but needed for proper functioning are:
- hardware detection components (e.g. ISA-PNP support, PCI PNP support)
- standard filesystems support (devfs, procfs, fbfs)
- boot-off-media-filesystem support
- process management (scheduler)
- user interaction (console, input/output HIDs)


Implementation 1:
strapper
bootfs
   mimir
   floppy
   irq
   sched
   console
.





